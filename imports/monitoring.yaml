tosca_definitions_version: cloudify_dsl_1_3

node_templates:

  kube:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content:
          apiVersion: v1
          kind: Config
          preferences: {}
          current-context: kubernetes-admin@kubernetes
          clusters:
          - name: kubernetes
            cluster:
              certificate-authority-data: { get_secret: kubernetes_certificate_authority_data }
              server: { concat: [ 'https://', { get_secret: kubernetes_master_ip}, ':', { get_secret: kubernetes_master_port } ] }
          contexts:
          - name: kubernetes-admin@kubernetes
            context:
              cluster: kubernetes
              user: kubernetes-admin
          users:
          - name: kubernetes-admin
            user:
              client-certificate-data: { get_secret: kubernetes-admin_client_certificate_data }
              client-key-data:  { get_secret: kubernetes-admin_client_key_data }
    relationships:
    - type: cloudify.relationships.depends_on
      target: kubernetes_node

  influx_deployment:
    type: cloudify.kubernetes.resources.Deployment
    properties:
      options:
        namespace: kube-system
      definition:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: monitoring-influxdb
          namespace: kube-system
        spec:
          replicas: 1
          template:
            metadata:
              labels:
                task: monitoring
                k8s-app: influxdb
            spec:
              containers:
              - name: influxdb
                image: gcr.io/google_containers/heapster-influxdb-amd64:v1.3.3
                volumeMounts:
                - mountPath: /data
                  name: influxdb-storage
              volumes:
              - name: influxdb-storage
                emptyDir: {}
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube

  influx_service:
    type: cloudify.kubernetes.resources.Service
    properties:
      options:
        namespace: kube-system
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            task: monitoring
            # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
            # If you are NOT using this as an addon, you should comment out this line.
            kubernetes.io/cluster-service: 'true'
            kubernetes.io/name: monitoring-influxdb
          name: monitoring-influxdb
          namespace: kube-system
        spec:
          ports:
          - port: 8086
            targetPort: 8086
          selector:
            k8s-app: influxdb
    interfaces:
      cloudify.interfaces.lifecycle:
        start: {}
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube
    - type: cloudify.relationships.depends_on
      target: influx_deployment

  grafana_deployment:
    type: cloudify.kubernetes.resources.Deployment
    properties:
      options:
        namespace: kube-system
      definition:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: monitoring-grafana
          namespace: kube-system
        spec:
          replicas: 1
          template:
            metadata:
              labels:
                task: monitoring
                k8s-app: grafana
            spec:
              containers:
              - name: grafana
                image: gcr.io/google_containers/heapster-grafana-amd64:v4.4.3
                ports:
                - containerPort: 3000
                  protocol: TCP
                volumeMounts:
                - mountPath: /etc/ssl/certs
                  name: ca-certificates
                  readOnly: true
                - mountPath: /var
                  name: grafana-storage
                env:
                - name: INFLUXDB_HOST
                  value: monitoring-influxdb
                - name: GF_SERVER_HTTP_PORT
                  value: "3000"
                  # The following env variables are required to make Grafana accessible via
                  # the kubernetes api-server proxy. On production clusters, we recommend
                  # removing these env variables, setup auth for grafana, and expose the grafana
                  # service using a LoadBalancer or a public IP.
                - name: GF_AUTH_BASIC_ENABLED
                  value: "false"
                - name: GF_AUTH_ANONYMOUS_ENABLED
                  value: "true"
                - name: GF_AUTH_ANONYMOUS_ORG_ROLE
                  value: Admin
                - name: GF_SERVER_ROOT_URL
                  # If you're only using the API Server proxy, set this value instead:
                  # value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/
                  value: /
              volumes:
              - name: ca-certificates
                hostPath:
                  path: /etc/ssl/certs
              - name: grafana-storage
                emptyDir: {}
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube
    - type: cloudify.relationships.depends_on
      target: influx_service

  grafana_service:
    type: cloudify.kubernetes.resources.Service
    properties:
      options:
        namespace: kube-system
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
            # If you are NOT using this as an addon, you should comment out this line.
            kubernetes.io/cluster-service: 'true'
            kubernetes.io/name: monitoring-grafana
          name: monitoring-grafana
          namespace: kube-system
        spec:
          # In a production setup, we recommend accessing Grafana through an external Loadbalancer
          # or through a public IP.
          # type: LoadBalancer
          # You could also use NodePort to expose the service at a randomly-generated port
          # type: NodePort
          ports:
          - port: 80
            targetPort: 3000
          selector:
            k8s-app: grafana
    interfaces:
      cloudify.interfaces.lifecycle:
        start: {}
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube
    - type: cloudify.relationships.depends_on
      target: grafana_deployment

  heapster_service_account:
    type: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      options:
        namespace: kube-system
      definition:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: heapster
          namespace: kube-system
      api_mapping:
        create:
          api: CoreV1Api
          method: create_namespaced_service_account
          payload: V1ServiceAccount
        read:
          api: CoreV1Api
          method: read_namespaced_service_account
        update:
          api: CoreV1Api
          method: replace_namespaced_service_account
        delete:
          api: CoreV1Api
          method: delete_namespaced_service_account
          payload: V1DeleteOptions
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube

  heapster_deployment:
    type: cloudify.kubernetes.resources.Deployment
    properties:
      options:
        namespace: kube-system
      definition:
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: heapster
          namespace: kube-system
        spec:
          replicas: 1
          template:
            metadata:
              labels:
                task: monitoring
                k8s-app: heapster
            spec:
              serviceAccountName: heapster
              containers:
              - name: heapster
                image: gcr.io/google_containers/heapster-amd64:v1.4.0
                imagePullPolicy: IfNotPresent
                command:
                - /heapster
                - --source=kubernetes:https://kubernetes.default
                - --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube
    - type: cloudify.relationships.depends_on
      target: grafana_service
    - type: cloudify.relationships.depends_on
      target: heapster_service_account

  heapster_service:
    type: cloudify.kubernetes.resources.Service
    properties:
      options:
        namespace: kube-system
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            task: monitoring
            # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
            # If you are NOT using this as an addon, you should comment out this line.
            kubernetes.io/cluster-service: 'true'
            kubernetes.io/name: Heapster
          name: heapster
          namespace: kube-system
        spec:
          ports:
          - port: 80
            targetPort: 8082
          selector:
            k8s-app: heapster
    interfaces:
      cloudify.interfaces.lifecycle:
        start: {}
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube
    - type: cloudify.relationships.depends_on
      target: heapster_deployment

  heapster_rbac:
    type: cloudify.kubernetes.resources.ClusterRoleBinding
    properties:
      definition:
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: heapster
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: system:heapster
        subjects:
          - kind: ServiceAccount
            name: heapster
            namespace: kube-system
    relationships:
    - type: cloudify.kubernetes.relationships.managed_by_master
      target: kube
    - type: cloudify.relationships.depends_on
      target: heapster_service
