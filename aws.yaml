tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-diamond-plugin
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-aws-plugin
  - imports/kubernetes.yaml
  - imports/cloud-config.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Centos 7.0 image.
    default: { get_secret: centos_core_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.medium

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ec2-user

  dashboard_ip:
    default: { get_attribute: [ kubernetes_master_ip, aws_resource_id ] }

  ks_node_dep_archive:
    default: https://github.com/cloudify-incubator/kubernetes-node-blueprints/archive/update-aws.zip

  ks_load_dep_archive:
    default: https://github.com/cloudify-incubator/kubernetes-lb-blueprints/archive/update-aws.zip

dsl_definitions:

  client_config: &client_config
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_secret: ec2_region_name }

node_templates:

  k8s_master_host:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      resource_config:
        ImageId: { get_input: ami }
        InstanceType: { get_input: instance_type }
        kwargs:
          Placement: { get_secret: availability_zone }
          UserData: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
          Groups:
          - { get_attribute: [ kubernetes_security_group, aws_resource_id ] }
          - { get_attribute: [ ssh_group, aws_resource_id ] }
          SubnetId: { get_secret: public_subnet_id }
      client_config: *client_config
      Tags:
        - Key: Name
          Value: KubernetesMasterHost
    relationships:
      - type: cloudify.relationships.depends_on
        target: kubernetes_master_ip

  kubernetes_master_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *client_config

  kubernetes_security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        GroupName: kubernetes_security_group
        Description: A group for Kubernetes traffic.
        VpcId: { get_secret: vpc_id }
      client_config: *client_config

  kubernetes_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
     client_config: *client_config
     resource_config:
      IpPermissions:
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 53
        ToPort: 53
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 53
        ToPort: 53
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 8472
        ToPort: 8472
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 2379
        ToPort: 2379
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 4001
        ToPort: 4001
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 4789
        ToPort: 4789
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 6443
        ToPort: 6443
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 6443
        ToPort: 6443
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 6783
        ToPort: 6784
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 6783
        ToPort: 6784
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 8285
        ToPort: 8285
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 9090
        ToPort: 9090
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 10250
        ToPort: 10250
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 10255
        ToPort: 10255
        IpRanges:
        - CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 30000
        ToPort: 40000
        IpRanges:
        - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: kubernetes_security_group

  ssh_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        GroupName: ssh_group
        Description: A group for SSH traffic.
        VpcId: { get_secret: vpc_id }
      client_config: *client_config

  ssh_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
     client_config: *client_config
     resource_config:
      IpPermissions:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        IpRanges:
        - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: ssh_group

  k8s_node:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: k8s_node_blue
          blueprint_archive: { get_input: ks_node_dep_archive }
          main_file_name: aws.yaml
        deployment:
          id: k8s_node_dep
          inputs:
            node_security_group: { get_attribute: [ kubernetes_security_group, aws_resource_id ] }
            node_ssh_group: { get_attribute: [ ssh_group, aws_resource_id ] }
            public_master_ip: { get_attribute: [ kubernetes_master_ip, aws_resource_id ] }
          outputs:
            deployment-type: deployment-type
            deployment-node-data-type: deployment-node-data-type
    relationships:
      - type: cloudify.relationships.depends_on
        target: k8s_master_host
      - type: cloudify.relationships.depends_on
        target: kubernetes_security_group
      - type: cloudify.relationships.depends_on
        target: ssh_group
      - type: cloudify.relationships.depends_on
        target: kubernetes_setup_master

  k8s_load:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: k8s_lb_blue
          blueprint_archive: { get_input: ks_load_dep_archive }
          main_file_name: aws.yaml
        deployment:
          id: k8s_lb_dep
          inputs:
            node_security_group: { get_attribute: [ kubernetes_security_group, aws_resource_id ] }
            node_ssh_group: { get_attribute: [ ssh_group, aws_resource_id ] }
          outputs:
            deployment-type: deployment-type
            deployment-node-data-type: deployment-node-data-type
    relationships:
      - type: cloudify.relationships.depends_on
        target: k8s_master_host
      - type: cloudify.relationships.depends_on
        target: k8s_node

outputs:

  kubernetes_master_public_ip:
    value: { get_attribute: [ kubernetes_master_ip, aws_resource_id ] }
