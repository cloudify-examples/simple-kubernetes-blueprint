tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3/types.yaml
  - plugin:cloudify-diamond-plugin
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-utilities-plugin
  - plugin:cloudify-vsphere-plugin
  - imports/kubernetes.yaml

inputs:

  vcenter_user:
    type: string
    default: { get_secret: vcenter_user }

  vcenter_password:
    type: string
    default: { get_secret: vcenter_password }

  vcenter_ip:
    type: string
    default: { get_secret: vcenter_ip }

  vcenter_port:
    type: string
    default: 443

  vcenter_datacenter:
    type: string
    description: >
       vcenter datacenter
    default: Datacenter

  vcenter_resource_pool:
    description: >
      Resource pool name
    default: Resources

  vsphere_auto_placement:
    type: string
    default: true

  template_name:
    type: string
    description: >
      "CentOS 7 template name"
    default: "CentOS-7.2-x86_64-1511-tmpl"

  cpus:
    type: integer
    default: 4

  memory:
    type: integer
    description: RAM in MB
    default: 4096

  vcenter_network:
    type: string
    description: >
      vcenter network
    default: Internal

  dns_servers:
    type: string
    description: >
        DNS servers ip list
    default:
      - '8.8.8.8'

  vcenter_datastore:
    type: string
    description: >
      vcenter datastore
    default: datastore1

  agent_user:
    default: root
    type: string

  agent_group:
    default: root

dsl_definitions:

  connection_config: &connection_config
    username: { get_input: vcenter_user }
    password: {get_input: vcenter_password }
    host: { get_input: vcenter_ip }
    port: { get_input: vcenter_port }
    datacenter_name: {get_input: vcenter_datacenter }
    resource_pool_name: { get_input: vcenter_resource_pool }
    auto_placement: { get_input: vsphere_auto_placement }
    allow_insecure: true

node_types:

  kubernetes_host:
    derived_from: cloudify.vsphere.nodes.Server
    properties:
      kubecpu:
        # by default: amount of cpu's on vm avaible for kubepods,
        # in most cases it must be same as full count of cpu on vm
        default: { get_input: cpus }
      kubemem:
        # by default: amount of memory on vm avaible for kubepods,
        # in most cases it must be same as full count of memory on vm
        default: { get_input: memory }
      connection_config:
        default: *connection_config
      server:
        default:
          name: kubernetes_vm
          template: { get_input: template_name }
          cpus: { get_input: cpus }
          memory: { get_input: memory }
      agent_config:
        default:
          install_method: remote
          user: { get_input: agent_user }
          key: { get_secret: agent_key_private }
      networking:
        default:
          dns_servers: { get_input: dns_servers }
          connect_networks:
            - name: { get_input: vcenter_network }

node_templates:

  kubernetes_node_base:
    type: kubernetes_host

  kubernetes_load_host:
    type: kubernetes_host

  kubernetes_node_host:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/vsphere/kubernetes.sh
    relationships:
      - target: kubernetes_node_base
        type: cloudify.relationships.contained_in

  kubernetes_master_base:
    type: kubernetes_host
    capabilities:
      scalable:
        properties:
          default_instances: 1

  kubernetes_master_host:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/vsphere/kubernetes.sh
    relationships:
      - target: kubernetes_master_base
        type: cloudify.relationships.contained_in

groups:

  k8s_node_group:
    members:
      - kubernetes_node_base
      - kubernetes_node_host

  k8s_load_group:
    members:
      - kubernetes_load_host

policies:

  kubernetes_node_vms_scaling_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances:  1
    targets: [k8s_node_group]

  kubernetes_load_vms_scaling_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances:  1
    targets: [k8s_load_group]

outputs:

  kubernetes_master_public_ip:
    value: { get_attribute: [ kubernetes_master_host, ip ] }


